[
  {
    "name": "git config --list",
    "description": "Show current configuration"
  },
  {
    "name": "git config --local --list",
    "description": "Show repository configuration"
  },
  {
    "name": "git config --global --list",
    "description": "Show global configuration"
  },
  {
    "name": "git config --system --list",
    "description": "Show system configuration"
  },
  {
    "name": "git config --global user.name [firstname lastname]",
    "description": "Set a name that is identifiable for credit when review version history"
  },
  {
    "name": "git config --global user.email [valid-email]",
    "description": "Set an email address that will be associated with each history marker"
  },
  {
    "name": "git config --global color.ui auto",
    "description": "Set automatic command line coloring for Git for easy reviewing"
  },
  {
    "name": "git config --global core.editor vi",
    "description": "Set global editor for commit"
  },
  {
    "name": "<repo>/.git/config",
    "description": "Repository specific configuration file [--local]"
  },
  {
    "name": "~/.gitconfig",
    "description": "User-specific configuration file [--global]"
  },
  {
    "name": "/etc/gitconfig",
    "description": "System-wide configuration file [--system]"
  },
  {
    "name": "git clone http://domain.com/user/repo.git",
    "description": "Clone an existing repository via http"
  },
  {
    "name": "git clone ssh://user@domain.com/repo.git",
    "description": "Clone an existing repository via ssh"
  },
  {
    "name": "git init",
    "description": "Create a new local repository in the current directory"
  },
  {
    "name": "git init <directory>",
    "description": "Create a new local repository in a specific directory"
  },
  {
    "name": "git status",
    "description": "Changes in working directory"
  },
  {
    "name": "git diff",
    "description": "Changes to tracked files"
  },
  {
    "name": "git diff <file>",
    "description": "See changes/difference of a specific file"
  },
  {
    "name": "git add .",
    "description": "Add all current changes to the next commit"
  },
  {
    "name": "git add -p <file>",
    "description": "Add some changes in <file> to the next commit"
  },
  {
    "name": "git add <filename1> <filename2>",
    "description": "Add only the mentioned files to the next commit"
  },
  {
    "name": "git commit -a",
    "description": "Commit all local changes in tracked files"
  },
  {
    "name": "git commit",
    "description": "Commit previously staged changes:"
  },
  {
    "name": "git commit -m 'message here'",
    "description": "Commit with message:"
  },
  {
    "name": "git commit -am 'message here'",
    "description": "Commit skipping the staging area and adding message"
  },
  {
    "name": "git commit --date=\"`date --date='n day ago'`\" -am \"<Commit Message Here>\"",
    "description": "Commit to some previous date"
  },
  {
    "name": "git commit -a --amend",
    "description": "Change last commit"
  },
  {
    "name": "git grep \"Hello\"",
    "description": "A text search on all files in the directory"
  },
  {
    "name": "git grep \"Hello\" v2.5",
    "description": "In any version of a text search"
  },
  {
    "name": "git log -S 'keyword'",
    "description": "Show commits that introduced a specific keyword"
  },
  {
    "name": "git log -S 'keyword' --pickaxe-regex",
    "description": "Show commits that introduced a specific keyword (using a regular expression)"
  },
  {
    "name": "git log",
    "description": "Show all commits, starting with newest (it'll show the hash, author information, date of commit and title of the commit)"
  },
  {
    "name": "git log --oneline",
    "description": "Show all the commits(it'll show just the commit hash and the commit message)"
  },
  {
    "name": "git log --author=\"username\"",
    "description": "Show all commits of a specific user"
  },
  {
    "name": "git log -p <file>",
    "description": "Show changes over time for a specific file"
  },
  {
    "name": "git log --oneline <origin/master>..<remote/master> --left-right",
    "description": "Display commits that are present only in remote/branch in right side"
  },
  {
    "name": "git blame <file>",
    "description": "Who changed, what and when in <file>"
  },
  {
    "name": "git reflog show",
    "description": "Show Reference log"
  },
  {
    "name": "git reflog delete",
    "description": "Delete Reference log"
  },
  {
    "name": "git mv Index.txt Index.html",
    "description": "Rename a file"
  },
  {
    "name": "git branch",
    "description": "List all local branches"
  },
  {
    "name": "git branch -a",
    "description": "List local/remote branches"
  },
  {
    "name": "git branch -r",
    "description": "List all remote branches"
  },
  {
    "name": "git checkout <branch>",
    "description": "Switch HEAD branch"
  },
  {
    "name": "git checkout <branch> -- <filename>",
    "description": "Checkout single file from different branch"
  },
  {
    "name": "git checkout -b <branch>",
    "description": "Create and switch new branch"
  },
  {
    "name": "git checkout -",
    "description": "Switch to the previous branch, without saying the name explicitly"
  },
  {
    "name": "git checkout -b <new_branch> <existing_branch>",
    "description": "Create a new branch from an exiting branch and switch to new branch"
  },
  {
    "name": "git checkout <commit-hash> -b <new_branch_name>",
    "description": "Checkout and create a new branch from existing commit"
  },
  {
    "name": "git branch <new-branch>",
    "description": "Create a new branch based on your current HEAD"
  },
  {
    "name": "git branch --track <new-branch> <remote-branch>",
    "description": "Create a new tracking branch based on a remote branch"
  },
  {
    "name": "git branch -d <branch>",
    "description": "Delete a local branch"
  },
  {
    "name": "git branch -D <branch>",
    "description": "Force delete a local branch"
  },
  {
    "name": "git tag <tag-name>",
    "description": "Mark HEAD with a tag"
  },
  {
    "name": "git tag -a <tag-name>",
    "description": "Mark HEAD with a tag and open the editor to include a message"
  },
  {
    "name": "git tag <tag-name> -am 'message here'",
    "description": "Mark HEAD with a tag that includes a message"
  },
  {
    "name": "git tag",
    "description": "List all tags"
  },
  {
    "name": "git tag -n",
    "description": "List all tags with their messages (tag message or commit message if tag has no message)"
  },
  {
    "name": "git remote -v",
    "description": "List all current configured remotes"
  },
  {
    "name": "git remote show <remote>",
    "description": "Show information about a remote"
  },
  {
    "name": "git remote add <remote> <url>",
    "description": "Add new remote repository, named <remote>"
  },
  {
    "name": "git remote rename <remote> <new_remote>",
    "description": "Rename a remote repository, from <remote> to <new_remote>"
  },
  {
    "name": "git remote rm <remote>",
    "description": "Remove a remote"
  },
  {
    "name": "git fetch <remote>",
    "description": "Download all changes from <remote>, but don't integrate into HEAD"
  },
  {
    "name": "git remote pull <remote> <url>",
    "description": "Download changes and directly merge/integrate into HEAD"
  },
  {
    "name": "git pull origin master",
    "description": "Get all changes from HEAD to local repository"
  },
  {
    "name": "git pull --rebase <remote> <branch>",
    "description": "Get all changes from HEAD to local repository without a merge"
  },
  {
    "name": "git push remote <remote> <branch>",
    "description": "Publish local changes on a remote"
  },
  {
    "name": "git push <remote> --delete <branch> (since Git v1.7.0)",
    "description": "Publish your tags"
  },
  {
    "name": "git push --tags",
    "description": "Publish your tags"
  },
  {
    "name": "git mergetool",
    "description": "Use your configured merge tool to solve conflicts"
  },
  {
    "name": "git merge <branch>",
    "description": "Merge branch into your current HEAD"
  },
  {
    "name": "git branch --merged",
    "description": "List merged branches"
  },
  {
    "name": "git rebase <branch>",
    "description": "Rebase your current HEAD onto <branch>"
  },
  {
    "name": "git rebase --abort",
    "description": "Abort a rebase"
  },
  {
    "name": "git rebase --continue",
    "description": "Continue a rebase after resolving conflicts"
  },
  {
    "name": "git add <resolved-file>",
    "description": "Use your editor to manually solve conflicts and (after resolving) mark file as resolved"
  },
  {
    "name": "git rm <resolved-file>",
    "description": "Use your editor to manually solve conflicts and (after resolving) mark file as resolved"
  },
  {
    "name": "git rebase -i <commit-just-before-first>",
    "description": "Squashing commits"
  },
  {
    "name": "git reset --hard HEAD",
    "description": "Discard all local changes in your working directory"
  },
  {
    "name": "git reset HEAD",
    "description": "Get all the files out of the staging area(i.e. undo the last git add)"
  },
  {
    "name": "git checkout HEAD <file>",
    "description": "Discard local changes in a specific file"
  },
  {
    "name": "git revert <commit>",
    "description": "Revert a commit (by producing a new commit with contrary changes)"
  },
  {
    "name": "git reset --hard <commit>",
    "description": "Reset your HEAD pointer to a previous commit and discard all changes since then"
  }
]
